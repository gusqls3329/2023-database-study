-- 1. 영화 rating 값이 'G'면서 rental_duration 7일 이상인 영화리스트,영화제목만 나타내시오.

SELECT title
FROM film
WHERE rating = 'G' and  rental_duration >= 7;

-- 2. 영화 rating 값이 'G'면서 rental_duration 7일 이상인 영화리스트와  rating 값이 'PG-13'면서 rental_duration 4일 미만인 영화제목 rating , rental_duration만 나타내시오.
SELECT title, rating , rental_duration
FROM film
WHERE (rating = 'G' and  rental_duration >= 7) OR ( rating = 'PG-13' and  rental_duration <4)
ORDER BY rating;

-- p.95 그룹함수 group Function sum: 합친값, min: 가장낮은값, max:가장큰값, count: 갯수, avg: 평균
SELECT SUM(amount) , MAX(amount), min(amount), COUNT(*), avg(amount), SUM(amount)/ COUNT(*)
FROM payment;

-- 고객마다 사용한 금액이 궁금하다
SELECT customer_id, SUM(amount) AS sum_amount
FROM payment
GROUP BY customer_id
ORDER BY sum_amount DESC;

-- 고객마다 사용한 금액중 사용금액에 100달러 이상인 사람만 보고싶다.
SELECT customer_id, SUM(amount) AS sum_amount
FROM payment
GROUP BY customer_id
having sum_amount >= 100;
ORDER BY sum_amount DESC;

-- 스탭마다의 총 판매금액과 평균 판매급액을 출력해주세요
SELECT staff_id, SUM(amount), AVG(amount)
FROM payment
GROUP BY staff_id;

-- p.96
SELECT DATE (rental_date),TIME(rental_date),rental_date
FROM rental;

SELECT *
FROM rental
WHERE  DATE (rental_date) = '2005-05-24';

-- 2005-06-14일에 렌탈을 한 고객의 first_name, last_name, 렌탈시간만 나타낸다

SELECT B.first_name,B.last_name, time(A.rental_date)
FROM rental A
 JOIN customer B
ON A.customer_id = B .customer_id
WHERE DATE (A.rental_date) = '2005-06-14'
ORDER BY A.rental_date;

-- p. 101
SELECT actor_id, first_name, last_name
FROM actor 
ORDER BY last_name, first_name DESC;

SELECT actor_id, last_name, first_name
FROM actor 
WHERE last_name IN ('WILLIAMS', 'DAVIS'); 

SELECT customer_id
FROM rental R
WHERE DATE (R.rental_date) = '2005-07-05'
ORDER BY customer_id;

SELECT c.email, r.return_date
FROM customer c
INNER JOIN rental r
ON c.customer_id = r.customer_id
WHERE DATE(r.rental_date) = '2005-06-14'
ORDER BY r.return_date DESC;


-- 게시판 만들기
USE board_ver1;
CREATE TABLE board (
ibord INT UNSIGNED AUTO_INCREMENT PRIMARY KEY
, title VARCHAR(100)	 not NULL
, ctnts VARCHAR(1000) not NULL
, writer VARCHAR(30) not NULL
,created_at DATETIME DEFAULT NOW()
, updated_at DATETIME DEFAULT NOW()
);
